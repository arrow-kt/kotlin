interface Eq<A> {
    fun ~Eq.eqv~eqv(a : A, b : A) : Bool
}

interface Semigroup<A> {
    fun ~SA.combine~combine(a : A, b : A) : A
}

fun <A> ~funeqv~eqv(a : A, b : A) : Bool = false
fun <A> ~funcombine~combine(a : A, b : A) : A = a

fun combineEqual(a : Int, b : Int, with eq : Eq<Int>, with semigroup : Semigroup<Int>) : Int {
    if (`Eq.eqv`eqv(a, b)) {
        return `SA.combine`combine(a, b)
    } else {
        return a
    }
}

fun combineEqual(a : Int, b : Int, eq : Eq<Int>, semigroup : Semigroup<Int>) : Int {
    if (`funeqv`eqv(a, b)) {
        return `funcombine`combine(a, b)
    } else {
        return a
    }
}