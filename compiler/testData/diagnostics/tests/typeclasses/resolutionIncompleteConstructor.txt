package

public val result: Wrapper<kotlin.Int>
public fun </*0*/ A> duplicate(/*0*/ x: A, /*1*/ semigroup: Semigroup<A>): A

public interface Semigroup</*0*/ A> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public abstract fun A.combine(/*0*/ other: A): A
}

public final data class Wrapper</*0*/ A> {
    public constructor Wrapper</*0*/ A>(/*0*/ wrapped: A)
    public final val wrapped: A
    public final operator /*synthesized*/ fun component1(): A
    public final /*synthesized*/ fun copy(/*0*/ wrapped: A = ...): Wrapper<A>
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String

    public companion object Companion {
        private constructor Companion()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public final class WrapperSemigroup</*0*/ A> : Semigroup<Wrapper<A>> {
            public constructor WrapperSemigroup</*0*/ A>(/*0*/ SG: Semigroup<A>)
            public final val SG: Semigroup<A>
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            public open override /*1*/ fun Wrapper<A>.combine(/*0*/ other: Wrapper<A>): Wrapper<A>
        }
    }
}
